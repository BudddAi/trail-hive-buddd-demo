---
import ModuleWrapper from '../utils/ModuleWrapper.astro';
import Logo from './molecules/Logo.astro';
import Button from './molecules/Button.astro';

interface NavbarProps {
  logo?: {
    image?: {
      url: string;
      alternativeText?: string;
    };
    url?: string;
  };
  navLinks?: Array<{
    text: string;
    url: string;
    target?: '_self' | '_blank';
  }>;
  buttons?: Array<{
    text: string;
    url?: string;
    style?: 'solid-dark' | 'outline-dark' | 'ghost' | 'outline-light' | 'solid-light' | 'solid-green';
  }>;
  spacing?: any;
}

export interface Props extends NavbarProps {}

const { 
  logo,
  navLinks = [],
  buttons = [],
  spacing
} = Astro.props;
---

<ModuleWrapper className="navbar" spacing={spacing}>
  <header class="bg-color-37 relative">
    <div class="container flex items-center justify-between py-4">
      {logo && (
        <Logo 
          image={logo.image}
          url={logo.url}
        />
      )}

      <nav class="hidden lg:flex items-center gap-8">
        {navLinks && navLinks.length > 0 && (
          <ul class="flex items-center gap-8 list-none m-0 p-0">
            {navLinks.map((link) => (
              <li>
                <a 
                  href={link.url || '#'} 
                  target={link.target || '_self'}
                  class="font-font-3 text-base leading-lh-14 text-color-5 no-underline hover:opacity-75 transition-opacity cursor-pointer"
                >
                  {link.text}
                </a>
              </li>
            ))}
          </ul>
        )}
        {buttons && buttons.length > 0 && (
          <div class="flex items-center gap-4">
            {buttons.map((button) => (
              <Button 
                label={button.text}
                href={button.url}
                variant={button.style}
              />
            ))}
          </div>
        )}
      </nav>

      <div class="lg:hidden">
        <button
          class="mobile-menu-toggle text-color-5 focus:outline-none bg-transparent border-none cursor-pointer p-2 -mr-2"
          aria-label="Toggle menu"
        >
          <svg
            class="w-6 h-6 hamburger-icon"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16m-7 6h7"
            />
          </svg>
          <svg
            class="w-6 h-6 close-icon hidden"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"
            />
          </svg>
        </button>
      </div>
    </div>

    <div class="mobile-menu lg:hidden absolute top-full left-0 w-full bg-color-37 z-50 shadow-md hidden">
      <nav class="container flex flex-col items-center gap-4 py-4">
        {navLinks && navLinks.length > 0 && (
          <ul class="flex flex-col items-center gap-4 list-none m-0 p-0">
            {navLinks.map((link) => (
              <li>
                <a 
                  href={link.url || '#'} 
                  target={link.target || '_self'}
                  class="font-font-3 text-base leading-lh-14 text-color-5 no-underline hover:opacity-75 transition-opacity cursor-pointer"
                >
                  {link.text}
                </a>
              </li>
            ))}
          </ul>
        )}
        {buttons && buttons.length > 0 && (
          <div class="flex flex-col items-center gap-4 w-full max-w-xs mx-auto">
            {buttons.map((button) => (
              <Button 
                label={button.text}
                href={button.url}
                variant={button.style}
                className="w-full"
              />
            ))}
          </div>
        )}
      </nav>
    </div>
  </header>
</ModuleWrapper>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleButton = document.querySelector('.mobile-menu-toggle');
    const mobileMenu = document.querySelector('.mobile-menu');
    const hamburgerIcon = document.querySelector('.hamburger-icon');
    const closeIcon = document.querySelector('.close-icon');

    if (toggleButton && mobileMenu && hamburgerIcon && closeIcon) {
      toggleButton.addEventListener('click', () => {
        const isOpen = !mobileMenu.classList.contains('hidden');
        
        if (isOpen) {
          mobileMenu.classList.add('hidden');
          hamburgerIcon.classList.remove('hidden');
          closeIcon.classList.add('hidden');
        } else {
          mobileMenu.classList.remove('hidden');
          hamburgerIcon.classList.add('hidden');
          closeIcon.classList.remove('hidden');
        }
      });
    }
  });
</script>